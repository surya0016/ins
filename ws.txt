/mks/TimeServer.java

package mks;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;

/**
 *
 * @author Malwad's Studio
 */
@WebService(serviceName = "TimeServer")
public class TimeServer {

    /**
     * Web service operation
     */
    @WebMethod(operationName = "getTimeAsString")
    public String getTimeAsString() {
        return  new java.util.Date().toString();
    }

    @WebMethod(operationName = "getTimeAsEllapsed")
    public Long getTimeAsEllapsed() {
        return new java.util.Date().getTime();
    }
}
--Java Client--
 
<%-- 
    Document   : index
    Created on : 27 July, 2024, 2:59:42 PM
    Author     : Malwad's Studio
--%>

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>JSP Page</title>
    </head>
    <body>
        <h1>Time !</h1>
<hr/>
    <%
    try {
	mks.TimeServer_Service service = new mks.TimeServer_Service();
	mks.TimeServer port = service.getTimeServerPort();
	java.lang.String result = port.getTimeAsString();
	out.println("Time As String : "+result);
    } catch (Exception ex) {
	ex.printStackTrace()
    }
   
    <%
    try {
	mks.TimeServer_Service service = new mks.TimeServer_Service();
	mks.TimeServer port = service.getTimeServerPort();
	// TODO process result here
	java.lang.Long result = port.getTimeAsEllapsed();
	out.println("Time As Ellapsed = "+result);
    } catch (Exception ex) {
	ex.printStackTrace()    }
    %>
<hr/>
    </body>
</html>


CalciServer.java
package mks;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;
/**
 *
 * @author Malwad's Studio
 */
@WebService(serviceName = "CalciServer")
public class CalciServer {
    
    @WebMethod(operationName = "addNum")
    public int addNum(@WebParam(name = "x") int x, @WebParam(name = "y") int y) {
        return x + y;
    }

    @WebMethod(operationName = "subNum")
    public int subNum(@WebParam(name = "x") int x, @WebParam(name = "y") int y) {
        return x - y;
    }

    @WebMethod(operationName = "mulNum")
    public int mulNum(@WebParam(name = "x") int x, @WebParam(name = "y") int y) {
        return x * y;
    }

    @WebMethod(operationName = "divNum")
    public int divNum(@WebParam(name = "x") int x, @WebParam(name = "y") int y) {
        return x / y;
    }

}

Client Side
 
# Index.html

<!--WS029-->
<html>
    <head>
        <title>TODO supply a title</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <div>
            <form name="cal" action="action.jsp" method="POST">
                <input type="number" name="num1" value="" placeholder="Enter a Number" />
                <input type="number" name="num2" value="" placeholder="Enter Second Number" /><br>
                <input type="radio" name="operations" value="add" /> Add <br>
                <input type="radio" name="operations" value="sub" /> Sub<br>
                <input type="radio" name="operations" value="mul" /> Multiple<br>
                <input type="radio" name="operations" value="div" /> Divide<br>
                <input type="submit" value="Calculate" name="Calculate" />

            </form>

        </div>
    </body>
</html>

#action.jsp
<%-- 
    Document   : action
    Created on : 28 July, 2024, 4:20:31 PM
    Author     : Malwad's Studio
--%>

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Result Page</title>
    </head>
    <body>
        <h1>Answer is !!!</h1>
        <hr/>
        <%
            try {
                mks.CalciServer_Service service = new mks.CalciServer_Service();
                mks.CalciServer port = service.getCalciServerPort();
                int x = Integer.parseInt(request.getParameter("num1"));
                int y =Integer.parseInt(request.getParameter("num2"));
                int result = 0;
                String Choice = request.getParameter("operations");
                if (Choice.equals("add")) {
                    result = port.addNum(x, y);
                } else if (Choice.equals("sub")) {
                    result = port.subNum(x, y);
                } else if (Choice.equals("div")) {
                    result = port.divNum(x, y);
                } else if (Choice.equals("mul")) {
                    result = port.mulNum(x, y);
                } else {
                    result = 404;
                }
                out.println("Matlab answer hai = " + result);
            } catch (Exception ex) {
            }
        %>
        <hr/>
    </body>
</html>

import java.sql.*;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;

/**
 * Web service for retrieving NAAC grades of colleges.
 */
@WebService(serviceName = "NaacService")
public class NaacService {

    @WebMethod(operationName = "getNaacGrade")
    public String getNaacGrade(@WebParam(name = "collegename") String collegename) {
        String grade = "";
        String query = "SELECT grade FROM naacgrades WHERE LOWER(colname) = LOWER(?)";
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            try (Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/NaacDB", "sies", "1234");
                PreparedStatement pstmt = conn.prepareStatement(query)) {
                pstmt.setString(1, collegename.toLowerCase());
                try (ResultSet res = pstmt.executeQuery()) {
                    if (res.next()) {
                        grade = res.getString("grade");
                    } else {
                        grade = "College not found";
                    }
                }
            }
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace(); 
            grade = "An error occurred while fetching the grade";
        }
        return grade;
    }
}

Client side (NaacService.java)
   
naac.jsp
<%-- 
    Document   : naac
    Created on : 3 Aug, 2024, 7:43:47 PM
    Author     : Malwad's Studio
--%>

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>JSP Page</title>
    </head>
    <body>
        <hr/>
     <%-- start web service invocation --%>  
    <%
        String colname=request.getParameter("colname");
    try {
        
	mks.NaacService_Service service = new mks.NaacService_Service();
	mks.NaacService port = service.getNaacServicePort();
	 // TODO initialize WS operation arguments here
	java.lang.String collegename = colname;
	// TODO process result here
	java.lang.String result = port.getNaacGrade(collegename);
	out.println("<h2> NAAC Grades of "+colname.toUpperCase()+" is "+result+"</h2>");
    } catch (Exception ex) {
	// TODO handle custom exceptions here
    }
    %>
    <%-- end web service invocation --%><hr/>

    </body>
</html>

TheTimesServices.java
package ani;
 
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;
 
/**
*
* @author malwad Studio
*/
@WebService(serviceName = "TheTimesServices")
public class TheTimesServices {
 
    /**
     * Web service operation
     */
    @WebMethod(operationName = "getPredictions")
    public String getPredictions(@WebParam(name = "sunsign") String sunsign) {
        String predict = "";
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/TheTimesNewsDb", "modi", "400paar");
            String sql = "Select predictions from predictions where sun_sign=?";
            PreparedStatement prestmt = con.prepareStatement(sql);
            prestmt.setString(1, sunsign);
            ResultSet rs = prestmt.executeQuery();
            rs.next();
            predict = rs.getString("predictions");
        } catch (Exception ex) {
            ex.printStackTrace();
 
        }
        return predict;
    }
 
    /**
     * Web service operation
     */
    @WebMethod(operationName = "getBreakingkNews")
    public String getBreakingkNews() {
        String news = "";
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/TheTimesNewsDb", "modi", "400paar");
            String sql = "Select breakingnews from news";
            Statement smt = con.createStatement();
            ResultSet rs = smt.executeQuery(sql);
            rs.next();
            news = rs.getString("breakingnews");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return news;
    }
 
}
<!DOCTYPE html>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<html>
    <head>
        <title>The Times    </title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <div><img src="OIP.jpg"/></div>
        <form name="new" action="action.jsp" method="POST">
            <br>
            <input type="submit" value="Get Breaking News" name="met" />
            <br>
            <br><select name="sunsign" >
                <option>Aries</option>
                <option>Taurus</option>
                <option>Gemini</option>
                <option>Cancer</option>
                <option>Leo</option>
                <option>Libra</option>
                <option>Scorpio</option>
                <option>Virgo</option>
                <option>Sagittarius</option>
                <option>Aquarius </option>
                <option>Pisces </option>
            </select>
<!--            <input type="text" name="sunsign" value="" placeholder="Enter SunSign"/>-->
            <input type="submit" value="Get Prediction" name="met" />
        </form>
    </body>
</html>


<%-- 
    Document   : action
    Created on : Aug 7, 2024, 11:07:21 AM
    Author     : admin
--%>
 
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>The Times</title>
    </head>
    <body>
        <h1>Hey India !!!</h1>   <hr/>
        <%
            try {
                ani.TheTimesServices_Service service = new ani.TheTimesServices_Service();
                ani.TheTimesServices port = service.getTheTimesServicesPort();
                // TODO process result here
                java.lang.String result = port.getBreakingkNews();
                out.println("Breaking News!! = " + result);
            } catch (Exception ex) {
                    ex.printStackTrace();
 
        }
        %>
        <hr/>
        <%-- start web service invocation --%><hr/>
 
        <%
            String signsun=request.getParameter("sunsign");
        try {
            ani.TheTimesServices_Service service = new ani.TheTimesServices_Service();
            ani.TheTimesServices port = service.getTheTimesServicesPort();

            java.lang.String sunsign = signsun;

            java.lang.String result = port.getPredictions(sunsign);
            out.println("Sunsign Predictions = "+result);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        %>
        <%-- end web service invocation --%><hr/>
 
 
    </body>
</html>


import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
 
/**
*
* @author Malwad Studio
*/
@Entity
@Table(name = "DEPARTMENTS")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Departments.findAll", query = "SELECT d FROM Departments d")
    , @NamedQuery(name = "Departments.findByDeptId", query = "SELECT d FROM Departments d WHERE d.deptId = :deptId")
    , @NamedQuery(name = "Departments.findByDeptname", query = "SELECT d FROM Departments d WHERE d.deptname = :deptname")
    , @NamedQuery(name = "Departments.findByManager", query = "SELECT d FROM Departments d WHERE d.manager = :manager")})
public class Departments implements Serializable {
 
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Column(name = "DEPT_ID")
    private Integer deptId;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "DEPTNAME")
    private String deptname;
    @Size(max = 255)
    @Column(name = "MANAGER")
    private String manager;
 
    public Departments() {
    }
 
    public Departments(Integer deptId) {
        this.deptId = deptId;
    }
 
    public Departments(Integer deptId, String deptname) {
        this.deptId = deptId;
        this.deptname = deptname;
    }
 
    public Integer getDeptId() {
        return deptId;
    }
 
    public void setDeptId(Integer deptId) {
        this.deptId = deptId;
    }
 
    public String getDeptname() {
        return deptname;
    }
 
    public void setDeptname(String deptname) {
        this.deptname = deptname;
    }
 
    public String getManager() {
        return manager;
    }
 
    public void setManager(String manager) {
        this.manager = manager;
    }
 
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (deptId != null ? deptId.hashCode() : 0);
        return hash;
    }
 
    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Departments)) {
            return false;
        }
        Departments other = (Departments) object;
        if ((this.deptId == null && other.deptId != null) || (this.deptId != null && !this.deptId.equals(other.deptId))) {
            return false;
        }
        return true;
    }
 
    @Override
    public String toString() {
        return "mk.Departments[ deptId=" + deptId + " ]";
    }
    
}

The Api’s for the service is written in DepartmentFascadeRest.java
package mk.service;
 
import java.util.List;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import mk.Departments;
 
/**
*
* @author Malwad studios
*/
@Stateless
@Path("mk.departments")
public class DepartmentsFacadeREST extends AbstractFacade<Departments> {
 
    @PersistenceContext(unitName = "Pract5_Rest_app_ServerPU")
    private EntityManager em;
 
    public DepartmentsFacadeREST() {
        super(Departments.class);
    }
 
    @POST
    @Override
    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    public void create(Departments entity) {
        super.create(entity);
    }
 
    @PUT
    @Path("{id}")
    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    public void edit(@PathParam("id") Integer id, Departments entity) {
        super.edit(entity);
    }
 
    @DELETE
    @Path("{id}")
    public void remove(@PathParam("id") Integer id) {
        super.remove(super.find(id));
    }
 
    @GET
    @Path("{id}")
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    public Departments find(@PathParam("id") Integer id) {
        return super.find(id);
    }
 
    @GET
    @Override
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    public List<Departments> findAll() {
        return super.findAll();
    }
 
    @GET
    @Path("{from}/{to}")
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    public List<Departments> findRange(@PathParam("from") Integer from, @PathParam("to") Integer to) {
        return super.findRange(new int[]{from, to});
    }
 
    @GET
    @Path("count")
    @Produces(MediaType.TEXT_PLAIN)
    public String countREST() {
        return String.valueOf(super.count());
    }
 
    @Override
    protected EntityManager getEntityManager() {
        return em;
    }
    
}


<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Employee Data</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 20px;
            }
            h1 {
                text-align: left;
            }

        </style>
    </head>
    <body>
        <h1>Employee Information</h1>
        <div id="loading">Loading employee data...</div>
        <div id="error">Failed to load employee data. Please try again later.</div>
        <table id="employeeTable">
            <thead>
                <tr>
                    <th>Emp ID</th>
                    <th>Emp Name</th>
                    <th>Dept ID</th>
                    <th>Designation</th>
                </tr>
            </thead>
            <tbody>
                <!-- Employee data will be inserted here dynamically -->
            </tbody>
        </table>

        <script>
            // Function to fetch employee data from the RESTful service
            async function fetchEmployeeData() {
            const loadingIndicator = document.getElementById('loading');
                    const errorIndicator = document.getElementById('error');
                    const tableBody = document.querySelector('#employeeTable tbody');
                    // Show loading indicator
                    loadingIndicator.style.display = 'block';
                    errorIndicator.style.display = 'none';
                    try {
                    const response = await fetch('http://localhost:10450/EmployeeServer/webresources/mks.employee', {
                    method: 'GET',
                            headers: {
                            'Content-Type': 'application/json'
                            }
                    });
                            if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const employees = await response.json();
                            // Clear existing table data
                            tableBody.innerHTML = '';
                            // Populate table with employee data
                            employees.forEach(emp = > {
                            const row = document.createElement('tr');
                                    const empIdCell = document.createElement('td');
                                    empIdCell.textContent = emp.empid;
                                    row.appendChild(empIdCell);
                                    const empNameCell = document.createElement('td');
                                    empNameCell.textContent = emp.empname;
                                    row.appendChild(empNameCell);
                                    const deptIdCell = document.createElement('td');
                                    deptIdCell.textContent = emp.deptid;
                                    row.appendChild(deptIdCell);
                                    const designationCell = document.createElement('td');
                                    designationCell.textContent = emp.designation;
                                    row.appendChild(designationCell);
                                    tableBody.appendChild(row);
                            });
                    } catch (error) {
            console.error('Error fetching employee data:', error);
                    errorIndicator.style.display = 'block';
            } finally {
            // Hide loading indicator
            loadingIndicator.style.display = 'none';
            }
            }

            // Call the function when the page loads
            window.onload = fetchEmployeeData;
        </script>

    </body>
</html>


package sies_air.service;
 
import java.util.List;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import sies_air.Flights;
 
/**
*
* @author malwad studio
*/
@Stateless
@Path("sies_air.flights")
public class FlightsFacadeREST extends AbstractFacade<Flights> {
 
    @PersistenceContext(unitName = "Airline_RestServicePU")
    private EntityManager em;
 
    public FlightsFacadeREST() {
        super(Flights.class);
    }
 
    @POST
    @Override
    @Consumes({ MediaType.APPLICATION_JSON})
    public void create(Flights entity) {
        super.create(entity);
    }
 
    @PUT
    @Path("{id}")
    @Consumes({ MediaType.APPLICATION_JSON})
    public void edit(@PathParam("id") String id, Flights entity) {
        super.edit(entity);
    }
 
    @DELETE
    @Path("{id}")
    public void remove(@PathParam("id") String id) {
        super.remove(super.find(id));
    }
 
    @GET
    @Path("{id}")
    @Produces({ MediaType.APPLICATION_JSON})
    public Flights find(@PathParam("id") String id) {
        return super.find(id);
    }
 
    @GET
    @Override
    @Produces({ MediaType.APPLICATION_JSON})
    public List<Flights> findAll() {
        return super.findAll();
    }
 
    @GET
    @Path("{from}/{to}")
    @Produces({ MediaType.APPLICATION_JSON})
    public List<Flights> findRange(@PathParam("from") Integer from, @PathParam("to") Integer to) {
        return super.findRange(new int[]{from, to});
    }
 
    @GET
    @Path("count")
    @Produces(MediaType.TEXT_PLAIN)
    public String countREST() {
        return String.valueOf(super.count());
    }
 
    @Override
    protected EntityManager getEntityManager() {
        return em;
    }
    
}
Airlines.html 
(RESTful client with normal web application)

<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Airline Data</title>
        <style>
            table {
                font-family: Arial, sans-serif;
                border-collapse: collapse; 
            }
            td, th {
                border: 2px solid seagreen;
                padding: 20px;
                text-align: center;
            }

        </style>
        <script>
            var request = new XMLHttpRequest();
            request.open('GET', 'http://localhost:8080/Airline_RestService/webresources/sies_air.flights', true);
            request.onload = function () {
                if (request.status >= 200 && request.status < 400) {
                    var data = JSON.parse(this.response);
                    for (var i = 0; i < data.length; i++) {
                        var table = document.getElementById("myTable");
                        var row = table.insertRow();
                        var cell0 = row.insertCell(0);
                        var cell1 = row.insertCell(1);
                        var cell2 = row.insertCell(2);
                        cell0.innerHTML = data[i].flightName;
                        cell1.innerHTML = data[i].departureDate;
                        cell2.innerHTML = data[i].capacity;
                    }
                } else {
                    console.error('Error fetching data');
                }
            };
            request.onerror = function () {
                console.error('Request failed');
            };
            request.send();
        </script>
    </head>
    <body>
        <h1>Airline Details</h1>
        <div>
            <table id="myTable">
                <tr>
                    <th>Flight Name</th>
                    <th>Departure Time</th>
                    <th>Capacity</th>
                </tr>
            </table>
        </div>
    </body>
</html>


WebForm.aspx.Cs
Set this as start page 
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel.Security;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
 
namespace CalClientApp
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
 
        }
       
        
        protected void addnum_Click(object sender, EventArgs e)
        {
            CalServiceRef.Service1Client client = new CalServiceRef.Service1Client();
            double a = double.Parse(num1.Text);
            double b = double.Parse(num2.Text);
            TextBox1.Text=Convert.ToString(client.add(a, b));
 
 
        }
 
        protected void subnum_Click(object sender, EventArgs e)
        {
            CalServiceRef.Service1Client client = new CalServiceRef.Service1Client();
            double a = double.Parse(num1.Text);
            double b = double.Parse(num2.Text);
            TextBox1.Text = Convert.ToString(client.sub(a, b));
 
        }
 
        protected void mulnum_Click(object sender, EventArgs e)
        {
            CalServiceRef.Service1Client client = new CalServiceRef.Service1Client();
            double a = double.Parse(num1.Text);
            double b = double.Parse(num2.Text);
            TextBox1.Text = Convert.ToString(client.mul(a, b));
 
        }
 
        protected void divnum_Click(object sender, EventArgs e)
        {
            CalServiceRef.Service1Client client = new CalServiceRef.Service1Client();
            double a = double.Parse(num1.Text);
            double b = double.Parse(num2.Text);
            TextBox1.Text = Convert.ToString(client.div(a, b));
 
        }
    }
}

 

 

